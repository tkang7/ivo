## Task

Build a contract UI in React that resembles the **final output example** by parsing data from the **input.json file**.

## Important notes

1. The final output should resemble the **Service Agreement** screenshot in the **final output example** above. 
2. Use the JSON file **input.json**. More information on this file below.  
3. You may use any styling framework of your choice. 
4. Your code should be written in such a way that it is easy to test and extend. 
5. You should render numbered "clause" blocks. These are denoted by the type **clause** in the **input.json** file. 
6. You should render certain pieces of text with colored background. These are denoted by the type **mention** in the **input.json** file. 
    
    ![mentions.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2cda854f-07c6-4bd6-adb9-03754e6d32d4/mentions.png)
    

## Input.json file

The **input.json file** contains mock data for an online contract template.

It follows the HTML document structure described in the following Mozilla Web Docs:

- https://developer.mozilla.org/en-US/docs/Web/API/Document
- https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements
- https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements
- https://developer.mozilla.org/en-US/docs/Web/API/Text

### Marks

```jsx
					{
            "bold": true,
            "text": "“Agreement”"
          }
```

We can format text to be **bold**, *****italicized*, ****or underlined by applying **marks**. Marks can be applied to any JSON object within the **input.json file**. 

If a JSON object has a mark applied to it, that entire block should be rendered with the applied mark, including any nested elements. 

For example, if a block has a **bold** mark applied to it, then any text within that block should also be displayed in **bold**.

```jsx
					{
            "bold": true,
						"type": "clause",
						"children": [
							{
		            "text": "the "
							**}, 
							{
								**"text": "“Agreement”",
							**}
						]
					}
```

### 'Clause' types

```jsx
{
        "type": "clause",
        "children": [...]
}
```

Clauses are custom block-level elements that behave like numbered `ol` lists. However, unlike numbered lists, clauses can have non-`li` children. 

Clauses should continue their numbering throughout the entire document, even if they are not adjacent to each other. 

For example, there should never be multiple clauses numbered as **1**. Clauses should continue to increment **1**, **2**, **3** etc. throughout the entire document.


### 'Mention' elements

```jsx
{
    "color": "rgb(126, 204, 73)",
    "type": "mention",
    "title": "Term",
    "children": [
      {
        "text": "1 year"
      }
    ],
    "id": "Term",
    "value": "1 year"
 }
```

You will notice that some text in the **final output example** has a colored background:

![mentions.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bf80ff95-6fa4-40da-a478-65840fcf1dab/mentions.png)

These are called **mentions.** Mentions are pieces of replaceable text and behave like programming variables. 

Mentions are identified by their `id` attribute. If you change the value of a mention, it should update the value of all instances of that mention throughout the document.